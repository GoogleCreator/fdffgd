-- CSXUI.lua
-- A lightweight CS:GOâ€‘style UI library for Roblox
local CSXUI = {}
CSXUI.__index = CSXUI

-- Default palette (can be customized)
CSXUI.Colors = {
    Background = Color3.fromRGB(30, 30, 30),
    Accent     = Color3.fromRGB(235, 185, 0),
    Primary    = Color3.fromRGB(45, 45, 45),
    Text       = Color3.fromRGB(220, 220, 220),
    Hover      = Color3.fromRGB(55, 55, 55),
    Active     = Color3.fromRGB(65, 65, 65),
}

-- Create main UI container
function CSXUI.new(title)
    local self = setmetatable({}, CSXUI)
    self.Window = Instance.new("ScreenGui")
    self.Main = Instance.new("Frame")
    self.Main.Size = UDim2.new(0, 400, 0, 30)
    self.Main.Position = UDim2.new(0.5, -200, 0.3, 0)
    self.Main.BackgroundColor3 = self.Colors.Background
    self.Main.Parent = self.Window

    local Title = Instance.new("TextLabel", self.Main)
    Title.Size = UDim2.new(1, 0, 1, 0)
    Title.BackgroundTransparency = 1
    Title.TextColor3 = self.Colors.Text
    Title.Font = Enum.Font.GothamSemibold
    Title.TextSize = 18
    Title.Text = title
    Title.TextXAlignment = Enum.TextXAlignment.Left
    Title.TextYAlignment = Enum.TextYAlignment.Center
    Title.Padding = UDim.new(0, 8)

    -- Container for controls
    self.Container = Instance.new("Frame", self.Main)
    self.Container.Size = UDim2.new(1, 0, 1, 0)
    self.Container.Position = UDim2.new(0, 0, 0, 30)
    self.Container.BackgroundTransparency = 1
    
    self.Window.Parent = game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui")
    self.Elements = {}
    return self
end

-- You can re-color the whole UI at any time:
function CSXUI:SetTheme(colors)
    for k,v in pairs(colors) do
        if self.Colors[k] then self.Colors[k] = v end
    end
    -- future: apply to existing elements...
end

-- Button
function CSXUI:Button(text, callback)
    local btn = Instance.new("TextButton", self.Container)
    btn.Size = UDim2.new(1, -16, 0, 30)
    btn.BackgroundColor3 = self.Colors.Primary
    btn.TextColor3 = self.Colors.Text
    btn.Font = Enum.Font.Gotham
    btn.TextSize = 16
    btn.Text = text
    btn.Position = UDim2.new(0, 8, 0, #self.Elements*40 + 8)
    btn.AutoButtonColor = false

    btn.MouseEnter:Connect(function()
        btn:TweenBackgroundColor3(self.Colors.Hover, "Out", "Quad", 0.2, true)
    end)
    btn.MouseLeave:Connect(function()
        btn:TweenBackgroundColor3(self.Colors.Primary, "Out", "Quad", 0.2, true)
    end)
    btn.MouseButton1Down:Connect(function()
        btn:TweenBackgroundColor3(self.Colors.Active, "Out", "Quad", 0.1, true)
    end)
    btn.MouseButton1Up:Connect(function()
        btn:TweenBackgroundColor3(self.Colors.Hover, "Out", "Quad", 0.1, true)
        pcall(callback)
    end)

    table.insert(self.Elements, btn)
    return btn
end

-- Toggle
function CSXUI:Toggle(text, state, callback)
    local idx = #self.Elements
    local container = Instance.new("Frame", self.Container)
    container.Size = UDim2.new(1, -16, 0, 30)
    container.Position = UDim2.new(0, 8, 0, idx*40 + 8)
    container.BackgroundTransparency = 1

    local label = Instance.new("TextLabel", container)
    label.Size = UDim2.new(0.8, 0, 1, 0)
    label.BackgroundTransparency = 1
    label.Text = text
    label.TextColor3 = self.Colors.Text
    label.Font = Enum.Font.Gotham
    label.TextSize = 16
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Position = UDim2.new(0, 0, 0, 0)

    local box = Instance.new("Frame", container)
    box.Size = UDim2.new(0, 20, 0, 20)
    box.Position = UDim2.new(1, -20, 0, 5)
    box.BackgroundColor3 = state and self.Colors.Accent or self.Colors.Primary

    box.MouseButton1Click = Instance.new("TextButton", box)
    box.MouseButton1Click.Size = UDim2.new(1,0,1,0)
    box.MouseButton1Click.BackgroundTransparency = 1

    local on = state

    box.MouseButton1Click.MouseButton1Click:Connect(function()
        on = not on
        box:TweenBackgroundColor3(on and self.Colors.Accent or self.Colors.Primary, "Out", "Quad", 0.2, true)
        pcall(callback, on)
    end)

    table.insert(self.Elements, container)
    return container
end

-- Slider
function CSXUI:Slider(text, min, max, start, callback)
    local idx = #self.Elements
    local grp = Instance.new("Frame", self.Container)
    grp.Size = UDim2.new(1, -16, 0, 40)
    grp.Position = UDim2.new(0, 8, 0, idx*50 + 8)
    grp.BackgroundTransparency = 1

    local lbl = Instance.new("TextLabel", grp)
    lbl.Size = UDim2.new(1, 0, 0, 18)
    lbl.BackgroundTransparency = 1
    lbl.Text = text.." : "..tostring(start)
    lbl.TextColor3 = self.Colors.Text
    lbl.Font = Enum.Font.Gotham
    lbl.TextSize = 14

    local barBG = Instance.new("Frame", grp)
    barBG.Size = UDim2.new(1, 0, 0, 14)
    barBG.Position = UDim2.new(0, 0, 0, 22)
    barBG.BackgroundColor3 = self.Colors.Primary
    barBG.ClipsDescendants = true

    local fill = Instance.new("Frame", barBG)
    fill.Size = UDim2.new((start-min)/(max-min), 0, 1, 0)
    fill.BackgroundColor3 = self.Colors.Accent

    local dragging = false
    barBG.InputBegan:Connect(function(inp)
        if inp.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
        end
    end)
    barBG.InputEnded:Connect(function(inp)
        if inp.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    barBG.InputChanged:Connect(function(inp)
        if dragging and inp.UserInputType == Enum.UserInputType.MouseMovement then
            local x = math.clamp((inp.Position.X - barBG.AbsolutePosition.X)/barBG.AbsoluteSize.X, 0, 1)
            fill:TweenSize(UDim2.new(x,0,1,0),"Out","Quad",0.1,true)
            local val = min + (max-min)*x
            lbl.Text = text.." : "..math.floor(val)
            pcall(callback, val)
        end
    end)

    table.insert(self.Elements, grp)
    return grp
end

-- Color Picker (simple)
function CSXUI:ColorPicker(text, startColor, callback)
    local idx = #self.Elements
    local grp = Instance.new("Frame", self.Container)
    grp.Size = UDim2.new(1, -16, 0, 30)
    grp.Position = UDim2.new(0, 8, 0, idx*40 + 8)
    grp.BackgroundTransparency = 1

    local lbl = Instance.new("TextLabel", grp)
    lbl.Size = UDim2.new(0.7,0,1,0)
    lbl.BackgroundTransparency = 1
    lbl.Text = text
    lbl.TextColor3 = self.Colors.Text
    lbl.Font = Enum.Font.Gotham
    lbl.TextSize = 16

    local swatch = Instance.new("Frame", grp)
    swatch.Size = UDim2.new(0,24,0,24)
    swatch.Position = UDim2.new(1,-28,0,3)
    swatch.BackgroundColor3 = startColor

    swatch.Active = true
    local pickerOpen = false
    local picker

    local function openPicker()
        if pickerOpen then return end
        pickerOpen = true
        picker = Instance.new("Frame", self.Window)
        picker.Size = UDim2.new(0,200,0,200)
        picker.Position = UDim2.new(0.5,-100,0.5,-100)
        picker.BackgroundColor3 = self.Colors.Primary
        -- simplistic: 3 sliders for RGB
        local colors = {"R","G","B"}
        for i, c in ipairs(colors) do
            self:Slider(c,0,255,startColor[c], function(val)
                local col = swatch.BackgroundColor3
                local new = col
                new = Color3.fromRGB(
                    i==1 and val or math.floor(new.R*255),
                    i==2 and val or math.floor(new.G*255),
                    i==3 and val or math.floor(new.B*255)
                )
                swatch.BackgroundColor3 = new
                callback(new)
            end)
        end
        picker.MouseLeave:Connect(function()
            picker:Destroy()
            pickerOpen=false
        end)
    end

    swatch.InputBegan:Connect(function(inp)
        if inp.UserInputType == Enum.UserInputType.MouseButton1 then
            openPicker()
        end
    end)

    table.insert(self.Elements, grp)
    return grp
end

-- Notification
function CSXUI:Notify(text, duration)
    local notif = Instance.new("Frame", self.Window)
    notif.Size = UDim2.new(0, 300,0, 60)
    notif.Position = UDim2.new(1,-310,0,20)
    notif.BackgroundColor3 = self.Colors.Primary
    notif.AnchorPoint = Vector2.new(0,0)

    local lbl = Instance.new("TextLabel", notif)
    lbl.Size = UDim2.new(1,0,1,0)
    lbl.BackgroundTransparency=1
    lbl.TextColor3 = self.Colors.Text
    lbl.Font = Enum.Font.GothamBold
    lbl.TextSize = 16
    lbl.Text = text

    notif:TweenPosition(UDim2.new(1,-310,0,20),"Out","Back",0.5,true)
    delay(duration or 3, function()
        notif:TweenPosition(UDim2.new(1,10,0,20),"In","Quad",0.5,true)
        wait(0.6)
        notif:Destroy()
    end)
end

return CSXUI
